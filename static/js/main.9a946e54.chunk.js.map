{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","breakValue","setBreakValue","sessionValue","setSessionValue","timer","setTimer","isStart","setIsStart","isSession","setIsSession","timeOutId","setTimeOutId","useEffect","id","setTimeout","startCountDown","clearTimeout","document","getElementById","play","handleIncrement","event","type","preventDefault","handleDecrement","newIsSession","className","onClick","e","minutes","parseInt","seconds","timerFormat","pause","currentTime","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9a946e54.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst initialBreakValue = 5;\nconst initialSessionValue = 25;\nconst initialTimer = 1500;\n\nfunction App() {\n  const [ breakValue, setBreakValue ] = React.useState(initialBreakValue);\n  const [ sessionValue, setSessionValue ] = React.useState(initialSessionValue);\n  const [ timer, setTimer ] = React.useState(initialTimer);\n  const [ isStart, setIsStart ] = React.useState(false);\n  const [ isSession, setIsSession ] = React.useState(true);\n  const [ timeOutId, setTimeOutId ] = React.useState(null);\n\n  React.useEffect(() => {\n    if (isStart === true) {\n      const id = setTimeout(startCountDown, 1000, timer);\n      setTimeOutId(id);\n    } else {\n      if(timeOutId) {\n        clearTimeout(timeOutId);\n        setTimeOutId(null);\n      }\n    }\n    if (timer === 0) {\n      document.getElementById(\"beep\").play();\n    }\n  }, [timer, isStart]);\n\n  const handleIncrement = (event,type) => {\n    event.preventDefault();\n    if (!isStart) {\n      switch (type) {\n        case \"break\":\n          if (breakValue < 60) {\n            setBreakValue(breakValue + 1);\n            if (isSession === false) {\n              setTimer((breakValue + 1) * 60);\n            }\n          }         \n          break;\n        case \"session\":\n          if (sessionValue < 60) {\n            setSessionValue(sessionValue + 1);\n            if (isSession === true) {\n              setTimer((sessionValue + 1) * 60);\n            }\n          }\n          break;\n        default:\n          return\n      } \n    } \n  }\n\n  const handleDecrement = (event,type) => {\n    event.preventDefault();\n    if (!isStart) {\n      switch (type) {\n        case \"break\":\n          if (breakValue > 1) {\n            setBreakValue(breakValue - 1);\n            if (isSession === false) {\n              setTimer((breakValue - 1) * 60);\n            } \n          }       \n          break;\n        case \"session\":\n          if (sessionValue > 1) {\n            setSessionValue(sessionValue - 1);\n            if (isSession === true) {\n              setTimer((sessionValue - 1) * 60);\n            }\n          }\n          break;\n        default:\n          return\n      }\n    }\n  }\n\n  const handleStartOrStop = event => {\n    event.preventDefault();\n    setIsStart(!isStart);\n  }\n\n  const handleReset = (event) => {\n    event.preventDefault();\n    setBreakValue(initialBreakValue);\n    setSessionValue(initialSessionValue);\n    setTimer(initialTimer);\n    setIsStart(false);\n    setIsSession(true);\n    document.getElementById(\"beep\").pause();\n    document.getElementById(\"beep\").currentTime = 0;\n  }\n\n  const startCountDown = (timer) => {\n    if (timer === 0) {\n      let newIsSession = !isSession;\n      let newTimer = null;\n      if (newIsSession) {\n        newTimer = sessionValue * 60;\n      } else {\n        newTimer = breakValue * 60;\n      }\n      setTimer(newTimer);\n      setIsSession(newIsSession);\n    } else {\n      setTimer(timer - 1);\n    }\n  }\n\n  const timerFormat = (timer) => {\n    const minutes = parseInt(timer / 60);\n    const seconds = parseInt(timer % 60);\n    let correctTimer = null;\n    if (minutes < 10 & seconds < 10) {\n      correctTimer = `0${minutes}:0${seconds}`;\n    } else if (minutes < 10 & seconds >= 10) {\n      correctTimer = `0${minutes}:${seconds}`;\n    } else if (minutes >= 10 & seconds < 10) {\n      correctTimer = `${minutes}:0${seconds}`;\n    } else {\n      correctTimer = `${minutes}:${seconds}`;\n    }\n    return correctTimer;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className=\"setting-wrapper\">\n          <div className=\"break-setting\">\n            <p id=\"break-label\">Break Length</p>\n            <button \n              id=\"break-decrement\"\n              onClick={e => handleDecrement(e, \"break\")}\n            >\n              -\n            </button>\n            <p id=\"break-length\">{breakValue}</p>\n            <button \n              id=\"break-increment\" \n              onClick={e => handleIncrement(e, \"break\")}\n            >\n              +\n            </button>\n          </div>\n\n          <div className=\"session-setting\">\n            <p id=\"session-label\">Session Length</p>\n\n            <button \n              id=\"session-decrement\"\n              onClick={e => handleDecrement(e, \"session\")}\n            >\n              -\n            </button>\n            <p id=\"session-length\">{sessionValue}</p>\n            <button \n              id=\"session-increment\" \n              onClick={e => handleIncrement(e, \"session\")}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"timer-wrapper\">\n          <div id=\"timer-label\">\n            {isSession ? \"Session\": \"Break\"}\n          </div>\n\n          <div id=\"time-left\">\n            {timerFormat(timer)}\n          </div>\n        </div>\n\n        <div className=\"button-groups\">\n          <button \n            id=\"start_stop\" \n            onClick = {handleStartOrStop}\n          >\n            {isStart ? \"STOP\" : \"START\"}\n          </button>\n\n          <button\n            id=\"reset\"\n            onClick={handleReset}\n          >\n            RESET\n          </button>\n        </div>\n\n        <audio\n          id=\"beep\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n      </div>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}