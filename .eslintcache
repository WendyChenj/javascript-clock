[{"/Users/wenjiechen/Downloads/react-projects/javascript-clock/src/reportWebVitals.js":"1","/Users/wenjiechen/Downloads/react-projects/javascript-clock/src/App.js":"2","/Users/wenjiechen/Downloads/react-projects/javascript-clock/src/index.js":"3"},{"size":362,"mtime":1608513117289,"results":"4","hashOfConfig":"5"},{"size":5403,"mtime":1608587495327,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1608513117289,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"192zgys",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wenjiechen/Downloads/react-projects/javascript-clock/src/reportWebVitals.js",[],"/Users/wenjiechen/Downloads/react-projects/javascript-clock/src/App.js",["15"],"import React from 'react';\nimport './App.css';\n\nconst initialBreakValue = 5;\nconst initialSessionValue = 25;\nconst initialTimer = 1500;\n\nfunction App() {\n  const [ breakValue, setBreakValue ] = React.useState(initialBreakValue);\n  const [ sessionValue, setSessionValue ] = React.useState(initialSessionValue);\n  const [ timer, setTimer ] = React.useState(initialTimer);\n  const [ isStart, setIsStart ] = React.useState(false);\n  const [ isSession, setIsSession ] = React.useState(true);\n  const [ timeOutId, setTimeOutId ] = React.useState(null);\n\n  React.useEffect(() => {\n    if (isStart === true) {\n      const id = setTimeout(startCountDown, 1000, timer);\n      setTimeOutId(id);\n    } else {\n      if(timeOutId) {\n        clearTimeout(timeOutId);\n        setTimeOutId(null);\n      }\n    }\n    if (timer === 0) {\n      document.getElementById(\"beep\").play();\n    }\n  }, [timer, isStart]);\n\n  const handleIncrement = (event,type) => {\n    event.preventDefault();\n    if (!isStart) {\n      switch (type) {\n        case \"break\":\n          if (breakValue < 60) {\n            setBreakValue(breakValue + 1);\n            if (isSession === false) {\n              setTimer((breakValue + 1) * 60);\n            }\n          }         \n          break;\n        case \"session\":\n          if (sessionValue < 60) {\n            setSessionValue(sessionValue + 1);\n            if (isSession === true) {\n              setTimer((sessionValue + 1) * 60);\n            }\n          }\n          break;\n        default:\n          return\n      } \n    } \n  }\n\n  const handleDecrement = (event,type) => {\n    event.preventDefault();\n    if (!isStart) {\n      switch (type) {\n        case \"break\":\n          if (breakValue > 1) {\n            setBreakValue(breakValue - 1);\n            if (isSession === false) {\n              setTimer((breakValue - 1) * 60);\n            } \n          }       \n          break;\n        case \"session\":\n          if (sessionValue > 1) {\n            setSessionValue(sessionValue - 1);\n            if (isSession === true) {\n              setTimer((sessionValue - 1) * 60);\n            }\n          }\n          break;\n        default:\n          return\n      }\n    }\n  }\n\n  const handleStartOrStop = event => {\n    event.preventDefault();\n    setIsStart(!isStart);\n  }\n\n  const handleReset = (event) => {\n    event.preventDefault();\n    setBreakValue(initialBreakValue);\n    setSessionValue(initialSessionValue);\n    setTimer(initialTimer);\n    setIsStart(false);\n    setIsSession(true);\n    document.getElementById(\"beep\").pause();\n    document.getElementById(\"beep\").currentTime = 0;\n  }\n\n  const startCountDown = (timer) => {\n    if (timer === 0) {\n      let newIsSession = !isSession;\n      let newTimer = null;\n      if (newIsSession) {\n        newTimer = sessionValue * 60;\n      } else {\n        newTimer = breakValue * 60;\n      }\n      setTimer(newTimer);\n      setIsSession(newIsSession);\n    } else {\n      setTimer(timer - 1);\n    }\n  }\n\n  const timerFormat = (timer) => {\n    const minutes = parseInt(timer / 60);\n    const seconds = parseInt(timer % 60);\n    let correctTimer = null;\n    if (minutes < 10 & seconds < 10) {\n      correctTimer = `0${minutes}:0${seconds}`;\n    } else if (minutes < 10 & seconds >= 10) {\n      correctTimer = `0${minutes}:${seconds}`;\n    } else if (minutes >= 10 & seconds < 10) {\n      correctTimer = `${minutes}:0${seconds}`;\n    } else {\n      correctTimer = `${minutes}:${seconds}`;\n    }\n    return correctTimer;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className=\"setting-wrapper\">\n          <div className=\"break-setting\">\n            <p id=\"break-label\">Break Length</p>\n            <button \n              id=\"break-decrement\"\n              onClick={e => handleDecrement(e, \"break\")}\n            >\n              -\n            </button>\n            <p id=\"break-length\">{breakValue}</p>\n            <button \n              id=\"break-increment\" \n              onClick={e => handleIncrement(e, \"break\")}\n            >\n              +\n            </button>\n          </div>\n\n          <div className=\"session-setting\">\n            <p id=\"session-label\">Session Length</p>\n\n            <button \n              id=\"session-decrement\"\n              onClick={e => handleDecrement(e, \"session\")}\n            >\n              -\n            </button>\n            <p id=\"session-length\">{sessionValue}</p>\n            <button \n              id=\"session-increment\" \n              onClick={e => handleIncrement(e, \"session\")}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"timer-wrapper\">\n          <div id=\"timer-label\">\n            {isSession ? \"Session\": \"Break\"}\n          </div>\n\n          <div id=\"time-left\">\n            {timerFormat(timer)}\n          </div>\n        </div>\n\n        <div className=\"button-groups\">\n          <button \n            id=\"start_stop\" \n            onClick = {handleStartOrStop}\n          >\n            {isStart ? \"STOP\" : \"START\"}\n          </button>\n\n          <button\n            id=\"reset\"\n            onClick={handleReset}\n          >\n            RESET\n          </button>\n        </div>\n\n        <audio\n          id=\"beep\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n        />\n      </div>      \n    </div>\n  );\n}\n\nexport default App;\n","/Users/wenjiechen/Downloads/react-projects/javascript-clock/src/index.js",[],{"ruleId":"16","severity":1,"message":"17","line":29,"column":6,"nodeType":"18","endLine":29,"endColumn":22,"suggestions":"19"},"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'startCountDown' and 'timeOutId'. Either include them or remove the dependency array.","ArrayExpression",["20"],{"desc":"21","fix":"22"},"Update the dependencies array to be: [timer, isStart, startCountDown, timeOutId]",{"range":"23","text":"24"},[874,890],"[timer, isStart, startCountDown, timeOutId]"]